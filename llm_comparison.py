# -*- coding: utf-8 -*-
"""LLM_comparison.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KaMikOMAtESepuxu_5y-Dga8b7gUdPZj
"""

"""
ファイル名: compute_metrics.py

説明:
  CSVファイル内の手動評価（recall, precision）を
  consult_id単位で集計し、consult_id, recall, precision を出力します。

使い方例:
  python compute_metrics.py
  python compute_metrics.py --input your.csv --output summary.csv
"""

import argparse
import sys
import pandas as pd

def parse_args():
    parser = argparse.ArgumentParser(
        description="Compute recall and precision per consult_id from manual evaluation CSV."
    )
    parser.add_argument(
        "--input", "-i",
        default="LLM_comparison.csv",
        help="評価結果CSVファイルパス (デフォルト: LLM_comparison.csv)"
    )
    parser.add_argument(
        "--output", "-o",
        default="LLM_comp_result",
        help="LLM_comp_result"
    )
    # Colab などから渡される余計な引数を無視
    args, _ = parser.parse_known_args()
    return args

def main():
    args = parse_args()

    # CSV読み込み
    try:
        df = pd.read_csv(args.input, dtype=str)
    except Exception as e:
        print(f"ファイルの読み込みに失敗しました: {e}", file=sys.stderr)
        sys.exit(1)

    # consult_id列の統合
    df["consult_id"] = df["consult_id_recall"].fillna(df["consult_id_precision"])

    # 数値型に変換
    df["recall"]    = pd.to_numeric(df["recall"],    errors="coerce").fillna(0)
    df["precision"] = pd.to_numeric(df["precision"], errors="coerce").fillna(0)

    # consult_idごとに平均を算出
    metrics = (
        df
        .groupby("consult_id", as_index=False)
        .agg(
            recall    = ("recall",    "mean"),
            precision = ("precision", "mean")
        )
    )

    # 小数点以下3桁にフォーマット
    metrics["recall"]    = metrics["recall"].map(lambda x: f"{x:.3f}")
    metrics["precision"] = metrics["precision"].map(lambda x: f"{x:.3f}")

    # 出力
    if args.output:
        metrics.to_csv(args.output, index=False, encoding="utf-8-sig")
        print(f"集計結果を {args.output} に出力しました。")
    else:
        print(metrics.to_csv(index=False, encoding="utf-8-sig"))

if __name__ == "__main__":
    main()